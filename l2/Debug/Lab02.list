
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007490  08007490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007498  08007498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080074a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  080074ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080074ac  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001748d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a15  00000000  00000000  0003750c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  0003b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b6f  00000000  00000000  0003c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179a1  00000000  00000000  00064f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011382d  00000000  00000000  0007c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a58  00000000  00000000  001900fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00195b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007438 	.word	0x08007438

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007438 	.word	0x08007438

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fd6f 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f876 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fab4 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 fa88 	bl	8001274 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d64:	f000 f934 	bl	8000fd0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d68:	f000 fa2e 	bl	80011c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d6c:	f000 f8b8 	bl	8000ee0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d70:	f000 f978 	bl	8001064 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d74:	213c      	movs	r1, #60	; 0x3c
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <main+0xc0>)
 8000d78:	f004 fc42 	bl	8005600 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCRead, 20);
 8000d7c:	2214      	movs	r2, #20
 8000d7e:	4925      	ldr	r1, [pc, #148]	; (8000e14 <main+0xc4>)
 8000d80:	4825      	ldr	r0, [pc, #148]	; (8000e18 <main+0xc8>)
 8000d82:	f001 f9c5 	bl	8002110 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000d86:	4825      	ldr	r0, [pc, #148]	; (8000e1c <main+0xcc>)
 8000d88:	f004 f9b0 	bl	80050ec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4823      	ldr	r0, [pc, #140]	; (8000e1c <main+0xcc>)
 8000d90:	f004 fa7e 	bl	8005290 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIRead = __HAL_TIM_GET_COUNTER(&htim3);
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0xc0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <main+0xd0>)
 8000d9c:	6013      	str	r3, [r2, #0]
	  position = (QEIRead/3072.0)*360;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <main+0xd0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb7a 	bl	800049c <__aeabi_ui2d>
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <main+0xd4>)
 8000dae:	f7ff fd19 	bl	80007e4 <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <main+0xd8>)
 8000dc0:	f7ff fbe6 	bl	8000590 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff fdf2 	bl	80009b4 <__aeabi_d2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <main+0xdc>)
 8000dd4:	6013      	str	r3, [r2, #0]
	  ADC = ADCRead[0];
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <main+0xc4>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <main+0xe0>)
 8000de4:	edc3 7a00 	vstr	s15, [r3]
	  setpoint = (ADC/4095)*360;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <main+0xe0>)
 8000dea:	ed93 7a00 	vldr	s14, [r3]
 8000dee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000e34 <main+0xe4>
 8000df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e38 <main+0xe8>
 8000dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <main+0xec>)
 8000e00:	edc3 7a00 	vstr	s15, [r3]
//	  MotorControl();
	  Vout = 500;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <main+0xf0>)
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <main+0xf4>)
 8000e08:	601a      	str	r2, [r3, #0]
	  MotorPWM();
 8000e0a:	f000 facb 	bl	80013a4 <MotorPWM>
	  QEIRead = __HAL_TIM_GET_COUNTER(&htim3);
 8000e0e:	e7c1      	b.n	8000d94 <main+0x44>
 8000e10:	200001d4 	.word	0x200001d4
 8000e14:	20000228 	.word	0x20000228
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	20000188 	.word	0x20000188
 8000e20:	20000220 	.word	0x20000220
 8000e24:	40a80000 	.word	0x40a80000
 8000e28:	40768000 	.word	0x40768000
 8000e2c:	20000224 	.word	0x20000224
 8000e30:	20000250 	.word	0x20000250
 8000e34:	457ff000 	.word	0x457ff000
 8000e38:	43b40000 	.word	0x43b40000
 8000e3c:	20000254 	.word	0x20000254
 8000e40:	20000258 	.word	0x20000258
 8000e44:	43fa0000 	.word	0x43fa0000

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2238      	movs	r2, #56	; 0x38
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f006 fac2 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 f8b6 	bl	8003fdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e82:	2302      	movs	r3, #2
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e86:	2304      	movs	r3, #4
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e8a:	2355      	movs	r3, #85	; 0x55
 8000e8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 f950 	bl	8004144 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eaa:	f000 fa9d 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fc4e 	bl	8004768 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ed2:	f000 fa89 	bl	80013e8 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	; 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 fa71 	bl	80073e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f6a:	f000 ff15 	bl	8001d98 <HAL_ADC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f74:	f000 fa38 	bl	80013e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000f84:	f002 f9e2 	bl	800334c <HAL_ADCEx_MultiModeConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f8e:	f000 fa2b 	bl	80013e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_ADC1_Init+0xec>)
 8000f94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f96:	2306      	movs	r3, #6
 8000f98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9e:	237f      	movs	r3, #127	; 0x7f
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_ADC1_Init+0xe8>)
 8000fb0:	f001 fc0a 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fba:	f000 fa15 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000028 	.word	0x20000028
 8000fcc:	04300002 	.word	0x04300002

08000fd0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <MX_LPUART1_UART_Init+0x90>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001012:	4812      	ldr	r0, [pc, #72]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001014:	f005 fb76 	bl	8006704 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f9e3 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001026:	f006 f911 	bl	800724c <HAL_UARTEx_SetTxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001030:	f000 f9da 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001038:	f006 f946 	bl	80072c8 <HAL_UARTEx_SetRxFifoThreshold>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001042:	f000 f9d1 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_LPUART1_UART_Init+0x8c>)
 8001048:	f006 f8c7 	bl	80071da <HAL_UARTEx_DisableFifoMode>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001052:	f000 f9c9 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000f4 	.word	0x200000f4
 8001060:	40008000 	.word	0x40008000

08001064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09c      	sub	sp, #112	; 0x70
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 f99e 	bl	80073e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a4:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010a6:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <MX_TIM1_Init+0x160>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010ac:	22a9      	movs	r2, #169	; 0xa9
 80010ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d0:	483b      	ldr	r0, [pc, #236]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010d2:	f003 ffb3 	bl	800503c <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f984 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ea:	4619      	mov	r1, r3
 80010ec:	4834      	ldr	r0, [pc, #208]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010ee:	f004 fc29 	bl	8005944 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010f8:	f000 f976 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010fc:	4830      	ldr	r0, [pc, #192]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80010fe:	f004 f865 	bl	80051cc <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001108:	f000 f96e 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111c:	4619      	mov	r1, r3
 800111e:	4828      	ldr	r0, [pc, #160]	; (80011c0 <MX_TIM1_Init+0x15c>)
 8001120:	f005 f9c6 	bl	80064b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800112a:	f000 f95d 	bl	80013e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 3072;
 8001132:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MX_TIM1_Init+0x15c>)
 8001156:	f004 fae1 	bl	800571c <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001160:	f000 f942 	bl	80013e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800118a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80011a2:	f005 fa1b 	bl	80065dc <HAL_TIMEx_ConfigBreakDeadTime>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80011ac:	f000 f91c 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM1_Init+0x15c>)
 80011b2:	f000 fa87 	bl	80016c4 <HAL_TIM_MspPostInit>

}
 80011b6:	bf00      	nop
 80011b8:	3770      	adds	r7, #112	; 0x70
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000188 	.word	0x20000188
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 f902 	bl	80073e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM3_Init+0xa4>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_TIM3_Init+0xa8>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM3_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM3_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM3_Init+0xa4>)
 80011fa:	f640 32ff 	movw	r2, #3071	; 0xbff
 80011fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM3_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM3_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800120c:	2303      	movs	r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM3_Init+0xa4>)
 8001238:	f004 f93c 	bl	80054b4 <HAL_TIM_Encoder_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001242:	f000 f8d1 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM3_Init+0xa4>)
 8001254:	f005 f92c 	bl	80064b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800125e:	f000 f8c3 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001d4 	.word	0x200001d4
 8001270:	40000400 	.word	0x40000400

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_DMA_Init+0x50>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <MX_DMA_Init+0x50>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6493      	str	r3, [r2, #72]	; 0x48
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DMA_Init+0x50>)
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x50>)
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x50>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6493      	str	r3, [r2, #72]	; 0x48
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x50>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200b      	movs	r0, #11
 80012b0:	f002 fa2f 	bl	8003712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b4:	200b      	movs	r0, #11
 80012b6:	f002 fa46 	bl	8003746 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_GPIO_Init+0xd4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <MX_GPIO_Init+0xd4>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_GPIO_Init+0xd4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <MX_GPIO_Init+0xd4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <MX_GPIO_Init+0xd4>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_GPIO_Init+0xd4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_GPIO_Init+0xd4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <MX_GPIO_Init+0xd4>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_GPIO_Init+0xd4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_GPIO_Init+0xd4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_GPIO_Init+0xd4>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_GPIO_Init+0xd4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f002 fe0d 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800134a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001350:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <MX_GPIO_Init+0xd8>)
 8001362:	f002 fc7d 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001366:	2320      	movs	r3, #32
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f002 fc6e 	bl	8003c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2028      	movs	r0, #40	; 0x28
 800138a:	f002 f9c2 	bl	8003712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138e:	2028      	movs	r0, #40	; 0x28
 8001390:	f002 f9d9 	bl	8003746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000800 	.word	0x48000800

080013a4 <MotorPWM>:
{

}

void MotorPWM()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick() >= timestamp)
 80013a8:	f000 faaa 	bl	8001900 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MotorPWM+0x38>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d310      	bcc.n	80013d8 <MotorPWM+0x34>
	{
		timestamp = HAL_GetTick()+500;
 80013b6:	f000 faa3 	bl	8001900 <HAL_GetTick>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <MotorPWM+0x38>)
 80013c2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Vout);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MotorPWM+0x3c>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MotorPWM+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d2:	ee17 2a90 	vmov	r2, s15
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000025c 	.word	0x2000025c
 80013e0:	20000258 	.word	0x20000258
 80013e4:	20000188 	.word	0x20000188

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x44>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_MspInit+0x44>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6613      	str	r3, [r2, #96]	; 0x60
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_MspInit+0x44>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x44>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x44>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x44>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800142a:	f002 fe7b 	bl	8004124 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b09e      	sub	sp, #120	; 0x78
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2254      	movs	r2, #84	; 0x54
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 ffbf 	bl	80073e0 <memset>
  if(hadc->Instance==ADC1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146a:	d167      	bne.n	800153c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800146c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001470:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001472:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001476:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fb8f 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001488:	f7ff ffae 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_ADC_MspInit+0x108>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_ADC_MspInit+0x108>)
 8001492:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_ADC_MspInit+0x108>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_ADC_MspInit+0x108>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a26      	ldr	r2, [pc, #152]	; (8001544 <HAL_ADC_MspInit+0x108>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_ADC_MspInit+0x108>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014bc:	2301      	movs	r3, #1
 80014be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c0:	2303      	movs	r3, #3
 80014c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f002 fbc5 	bl	8003c60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_ADC_MspInit+0x110>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014de:	2205      	movs	r2, #5
 80014e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 8001506:	2220      	movs	r2, #32
 8001508:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 8001512:	f002 f933 	bl	800377c <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800151c:	f7ff ff64 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_ADC_MspInit+0x10c>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2012      	movs	r0, #18
 8001532:	f002 f8ee 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001536:	2012      	movs	r0, #18
 8001538:	f002 f905 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3778      	adds	r7, #120	; 0x78
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	20000094 	.word	0x20000094
 800154c:	40020008 	.word	0x40020008

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b09e      	sub	sp, #120	; 0x78
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f005 ff35 	bl	80073e0 <memset>
  if(huart->Instance==LPUART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <HAL_UART_MspInit+0xa8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d136      	bne.n	80015ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001580:	2320      	movs	r3, #32
 8001582:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fb07 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001598:	f7ff ff26 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_UART_MspInit+0xac>)
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_UART_MspInit+0xac>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0xac>)
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0xac>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_UART_MspInit+0xac>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_UART_MspInit+0xac>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015cc:	230c      	movs	r3, #12
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015dc:	230c      	movs	r3, #12
 80015de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f002 fb39 	bl	8003c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3778      	adds	r7, #120	; 0x78
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40008000 	.word	0x40008000
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_TIM_Base_MspInit+0x38>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d128      	bne.n	80016b4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a2:	2302      	movs	r3, #2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f002 fad6 	bl	8003c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <HAL_TIM_MspPostInit+0x68>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d11d      	bne.n	8001722 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_TIM_MspPostInit+0x6c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_TIM_MspPostInit+0x6c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001710:	2306      	movs	r3, #6
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f002 fa9f 	bl	8003c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f8ac 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Channel1_IRQHandler+0x10>)
 800178e:	f002 f918 	bl	80039c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000094 	.word	0x20000094

0800179c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <ADC1_2_IRQHandler+0x10>)
 80017a2:	f000 fd89 	bl	80022b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000028 	.word	0x20000028

080017b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b8:	f002 fbec 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f005 fded 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fa9b 	bl	8000d50 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   r0, =_estack
 800181c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001828:	080074a0 	.word	0x080074a0
  ldr r2, =_sbss
 800182c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001830:	20000264 	.word	0x20000264

08001834 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC3_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f001 ff5b 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fdcc 	bl	80013f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]

}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_InitTick+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d022      	beq.n	80018c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_InitTick+0x6c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_InitTick+0x68>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001888:	fbb1 f3f3 	udiv	r3, r1, r3
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f001 ff66 	bl	8003762 <HAL_SYSTICK_Config>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10f      	bne.n	80018bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	d809      	bhi.n	80018b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a2:	2200      	movs	r2, #0
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	f04f 30ff 	mov.w	r0, #4294967295
 80018aa:	f001 ff32 	bl	8003712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_InitTick+0x70>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e004      	b.n	80018c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x20>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_IncTick+0x1c>)
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	20000260 	.word	0x20000260
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000260 	.word	0x20000260

08001918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3360      	adds	r3, #96	; 0x60
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <LL_ADC_SetOffset+0x44>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	03fff000 	.word	0x03fff000

080019c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3360      	adds	r3, #96	; 0x60
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3360      	adds	r3, #96	; 0x60
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b087      	sub	sp, #28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3360      	adds	r3, #96	; 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3360      	adds	r3, #96	; 0x60
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3330      	adds	r3, #48	; 0x30
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	4413      	add	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	211f      	movs	r1, #31
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 011f 	and.w	r1, r3, #31
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3314      	adds	r3, #20
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	0e5b      	lsrs	r3, r3, #25
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	0d1b      	lsrs	r3, r3, #20
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	0d1b      	lsrs	r3, r3, #20
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0318 	and.w	r3, r3, #24
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	400b      	ands	r3, r1
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	0007ffff 	.word	0x0007ffff

08001c00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6093      	str	r3, [r2, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_IsEnabled+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_IsEnabled+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1a9      	b.n	8002106 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fb3b 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff3f 	bl	8001c5c <LL_ADC_IsDeepPowerDownEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff25 	bl	8001c38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff5a 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff3e 	bl	8001c84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e08:	4b9c      	ldr	r3, [pc, #624]	; (800207c <HAL_ADC_Init+0x2e4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	4a9c      	ldr	r2, [pc, #624]	; (8002080 <HAL_ADC_Init+0x2e8>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e1c:	e002      	b.n	8001e24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f9      	bne.n	8001e1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff3c 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff75 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8001e60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8142 	bne.w	80020f4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 813e 	bne.w	80020f4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d141      	bne.n	8001f1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_Init+0x114>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	; (8002084 <HAL_ADC_Init+0x2ec>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10f      	bne.n	8001ecc <HAL_ADC_Init+0x134>
 8001eac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001eb0:	f7ff ff24 	bl	8001cfc <LL_ADC_IsEnabled>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	4873      	ldr	r0, [pc, #460]	; (8002084 <HAL_ADC_Init+0x2ec>)
 8001eb8:	f7ff ff20 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e012      	b.n	8001ef2 <HAL_ADC_Init+0x15a>
 8001ecc:	486e      	ldr	r0, [pc, #440]	; (8002088 <HAL_ADC_Init+0x2f0>)
 8001ece:	f7ff ff15 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	486d      	ldr	r0, [pc, #436]	; (800208c <HAL_ADC_Init+0x2f4>)
 8001ed6:	f7ff ff11 	bl	8001cfc <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	431c      	orrs	r4, r3
 8001ede:	486c      	ldr	r0, [pc, #432]	; (8002090 <HAL_ADC_Init+0x2f8>)
 8001ee0:	f7ff ff0c 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x172>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5f      	ldr	r2, [pc, #380]	; (8002084 <HAL_ADC_Init+0x2ec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Init+0x176>
 8001f0a:	4a62      	ldr	r2, [pc, #392]	; (8002094 <HAL_ADC_Init+0x2fc>)
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_Init+0x178>
 8001f0e:	4a62      	ldr	r2, [pc, #392]	; (8002098 <HAL_ADC_Init+0x300>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fcfe 	bl	8001918 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7f5b      	ldrb	r3, [r3, #29]
 8001f20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	045b      	lsls	r3, r3, #17
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_ADC_Init+0x304>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fee4 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 8001fa8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d17f      	bne.n	80020b0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d17c      	bne.n	80020b0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002000:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6911      	ldr	r1, [r2, #16]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002016:	e013      	b.n	8002040 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800203c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12a      	bne.n	80020a0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206c:	430a      	orrs	r2, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e019      	b.n	80020b0 <HAL_ADC_Init+0x318>
 800207c:	20000000 	.word	0x20000000
 8002080:	053e2d63 	.word	0x053e2d63
 8002084:	50000100 	.word	0x50000100
 8002088:	50000400 	.word	0x50000400
 800208c:	50000500 	.word	0x50000500
 8002090:	50000600 	.word	0x50000600
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10c      	bne.n	80020d2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f023 010f 	bic.w	r1, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
 80020d0:	e007      	b.n	80020e2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020f 	bic.w	r2, r2, #15
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f2:	e007      	b.n	8002104 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002104:	7ffb      	ldrb	r3, [r7, #31]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop

08002110 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002124:	d004      	beq.n	8002130 <HAL_ADC_Start_DMA+0x20>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5a      	ldr	r2, [pc, #360]	; (8002294 <HAL_ADC_Start_DMA+0x184>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_ADC_Start_DMA+0x24>
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_ADC_Start_DMA+0x188>)
 8002132:	e000      	b.n	8002136 <HAL_ADC_Start_DMA+0x26>
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_ADC_Start_DMA+0x18c>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd62 	bl	8001c00 <LL_ADC_GetMultimode>
 800213c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fe01 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 809b 	bne.w	8002286 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADC_Start_DMA+0x4e>
 800215a:	2302      	movs	r3, #2
 800215c:	e096      	b.n	800228c <HAL_ADC_Start_DMA+0x17c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_ADC_Start_DMA+0x190>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d008      	beq.n	8002182 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d002      	beq.n	8002182 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b09      	cmp	r3, #9
 8002180:	d17a      	bne.n	8002278 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 ff60 	bl	8003048 <ADC_Enable>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d16d      	bne.n	800226e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <HAL_ADC_Start_DMA+0x184>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_ADC_Start_DMA+0xb4>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_ADC_Start_DMA+0x194>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d002      	beq.n	80021c0 <HAL_ADC_Start_DMA+0xb0>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e003      	b.n	80021c8 <HAL_ADC_Start_DMA+0xb8>
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_ADC_Start_DMA+0x198>)
 80021c2:	e001      	b.n	80021c8 <HAL_ADC_Start_DMA+0xb8>
 80021c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d002      	beq.n	80021d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	f023 0206 	bic.w	r2, r3, #6
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
 80021fa:	e002      	b.n	8002202 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_ADC_Start_DMA+0x19c>)
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_ADC_Start_DMA+0x1a0>)
 8002210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_ADC_Start_DMA+0x1a4>)
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	221c      	movs	r2, #28
 8002220:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0210 	orr.w	r2, r2, #16
 8002238:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3340      	adds	r3, #64	; 0x40
 8002254:	4619      	mov	r1, r3
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f001 fb37 	bl	80038cc <HAL_DMA_Start_IT>
 800225e:	4603      	mov	r3, r0
 8002260:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fd5b 	bl	8001d22 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800226c:	e00d      	b.n	800228a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002276:	e008      	b.n	800228a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002284:	e001      	b.n	800228a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	50000100 	.word	0x50000100
 8002298:	50000300 	.word	0x50000300
 800229c:	50000700 	.word	0x50000700
 80022a0:	50000600 	.word	0x50000600
 80022a4:	50000500 	.word	0x50000500
 80022a8:	50000400 	.word	0x50000400
 80022ac:	08003175 	.word	0x08003175
 80022b0:	0800324d 	.word	0x0800324d
 80022b4:	08003269 	.word	0x08003269

080022b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x30>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a8e      	ldr	r2, [pc, #568]	; (800251c <HAL_ADC_IRQHandler+0x264>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_IRQHandler+0x34>
 80022e8:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_ADC_IRQHandler+0x268>)
 80022ea:	e000      	b.n	80022ee <HAL_ADC_IRQHandler+0x36>
 80022ec:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <HAL_ADC_IRQHandler+0x26c>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fc86 	bl	8001c00 <LL_ADC_GetMultimode>
 80022f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <HAL_ADC_IRQHandler+0x78>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d012      	beq.n	8002330 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 f808 	bl	8003338 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_ADC_IRQHandler+0x8c>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8094 	beq.w	8002478 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 808e 	beq.w	8002478 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb9f 	bl	8001abc <LL_ADC_REG_IsTriggerSourceSWStart>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d072      	beq.n	800246a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_ADC_IRQHandler+0x264>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_ADC_IRQHandler+0xea>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a65      	ldr	r2, [pc, #404]	; (8002528 <HAL_ADC_IRQHandler+0x270>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_IRQHandler+0xe6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	e003      	b.n	80023a6 <HAL_ADC_IRQHandler+0xee>
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_ADC_IRQHandler+0x274>)
 80023a0:	e001      	b.n	80023a6 <HAL_ADC_IRQHandler+0xee>
 80023a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d008      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d002      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d104      	bne.n	80023ca <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	e014      	b.n	80023f4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_ADC_IRQHandler+0x264>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_ADC_IRQHandler+0x130>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a53      	ldr	r2, [pc, #332]	; (8002528 <HAL_ADC_IRQHandler+0x270>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e003      	b.n	80023ec <HAL_ADC_IRQHandler+0x134>
 80023e4:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_ADC_IRQHandler+0x274>)
 80023e6:	e001      	b.n	80023ec <HAL_ADC_IRQHandler+0x134>
 80023e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d135      	bne.n	800246a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d12e      	bne.n	800246a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc9a 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11a      	bne.n	8002452 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 020c 	bic.w	r2, r2, #12
 800242a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d112      	bne.n	800246a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002450:	e00b      	b.n	800246a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f984 	bl	8002778 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	220c      	movs	r2, #12
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <HAL_ADC_IRQHandler+0x1d4>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80b3 	beq.w	80025fe <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80ad 	beq.w	80025fe <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fb3a 	bl	8001b3a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024c6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff faf5 	bl	8001abc <LL_ADC_REG_IsTriggerSourceSWStart>
 80024d2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_ADC_IRQHandler+0x264>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x23a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_ADC_IRQHandler+0x270>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d002      	beq.n	80024ee <HAL_ADC_IRQHandler+0x236>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e003      	b.n	80024f6 <HAL_ADC_IRQHandler+0x23e>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_ADC_IRQHandler+0x274>)
 80024f0:	e001      	b.n	80024f6 <HAL_ADC_IRQHandler+0x23e>
 80024f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d008      	beq.n	8002510 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d002      	beq.n	8002510 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b07      	cmp	r3, #7
 800250e:	d10f      	bne.n	8002530 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	e01f      	b.n	800255a <HAL_ADC_IRQHandler+0x2a2>
 800251a:	bf00      	nop
 800251c:	50000100 	.word	0x50000100
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700
 8002528:	50000500 	.word	0x50000500
 800252c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a8b      	ldr	r2, [pc, #556]	; (8002764 <HAL_ADC_IRQHandler+0x4ac>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_ADC_IRQHandler+0x296>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a8a      	ldr	r2, [pc, #552]	; (8002768 <HAL_ADC_IRQHandler+0x4b0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d002      	beq.n	800254a <HAL_ADC_IRQHandler+0x292>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e003      	b.n	8002552 <HAL_ADC_IRQHandler+0x29a>
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_ADC_IRQHandler+0x4b4>)
 800254c:	e001      	b.n	8002552 <HAL_ADC_IRQHandler+0x29a>
 800254e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002552:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d047      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_ADC_IRQHandler+0x2c2>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03f      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13a      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d133      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12e      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fbea 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11a      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d112      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d6:	e00b      	b.n	80025f0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fe79 	bl	80032e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2260      	movs	r2, #96	; 0x60
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d011      	beq.n	800262c <HAL_ADC_IRQHandler+0x374>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8be 	bl	80027a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <HAL_ADC_IRQHandler+0x3a4>
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fe5f 	bl	8003310 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_ADC_IRQHandler+0x3d4>
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fe51 	bl	8003324 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d043      	beq.n	800271e <HAL_ADC_IRQHandler+0x466>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d03e      	beq.n	800271e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80026a8:	2301      	movs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	e021      	b.n	80026f2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x410>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_ADC_IRQHandler+0x4ac>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_IRQHandler+0x414>
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_ADC_IRQHandler+0x4b8>)
 80026ca:	e000      	b.n	80026ce <HAL_ADC_IRQHandler+0x416>
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_ADC_IRQHandler+0x4bc>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff faa4 	bl	8001c1c <LL_ADC_GetMultiDMATransfer>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80026da:	2301      	movs	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e008      	b.n	80026f2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10e      	bne.n	8002716 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002708:	f043 0202 	orr.w	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f84f 	bl	80027b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2210      	movs	r2, #16
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d018      	beq.n	800275a <HAL_ADC_IRQHandler+0x4a2>
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d013      	beq.n	800275a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	f043 0208 	orr.w	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002752:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fdd1 	bl	80032fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	50000100 	.word	0x50000100
 8002768:	50000500 	.word	0x50000500
 800276c:	50000400 	.word	0x50000400
 8002770:	50000300 	.word	0x50000300
 8002774:	50000700 	.word	0x50000700

08002778 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b6      	sub	sp, #216	; 0xd8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x24>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f000 bc13 	b.w	8003012 <HAL_ADC_ConfigChannel+0x84a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff faa6 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 83f3 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7ff f965 	bl	8001ae2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fa94 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002822:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff faa0 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 8002830:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 81d9 	bne.w	8002bf0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800283e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 81d4 	bne.w	8002bf0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002850:	d10f      	bne.n	8002872 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	4619      	mov	r1, r3
 800285e:	f7ff f97f 	bl	8001b60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f913 	bl	8001a96 <LL_ADC_SetSamplingTimeCommonConfig>
 8002870:	e00e      	b.n	8002890 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff f96e 	bl	8001b60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f903 	bl	8001a96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d022      	beq.n	80028f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c2:	f7ff f85d 	bl	8001980 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f7ff f8a9 	bl	8001a2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x126>
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x128>
 80028ee:	2300      	movs	r3, #0
 80028f0:	461a      	mov	r2, r3
 80028f2:	f7ff f8b5 	bl	8001a60 <LL_ADC_SetOffsetSaturation>
 80028f6:	e17b      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f862 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x15c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f857 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	e01e      	b.n	8002962 <HAL_ADC_ConfigChannel+0x19a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f84c 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800294a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x1b2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e018      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1e4>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800298e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f81b 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe ffff 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x222>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fff4 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	e01e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x260>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe ffe9 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e004      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x278>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	e018      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x2aa>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe ffb8 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe ff9c 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2e8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ff91 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	e01e      	b.n	8002aee <HAL_ADC_ConfigChannel+0x326>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe ff86 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e004      	b.n	8002aec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x33e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e016      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x36c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe ff57 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ff3b 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x3aa>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2103      	movs	r1, #3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe ff30 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	e017      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x3da>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2103      	movs	r1, #3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe ff25 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x3f2>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	e011      	b.n	8002bde <HAL_ADC_ConfigChannel+0x416>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2103      	movs	r1, #3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ff02 	bl	80019f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f881 	bl	8001cfc <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 813d 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7fe ffd2 	bl	8001bb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4aa2      	ldr	r2, [pc, #648]	; (8002ea4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f040 812e 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x480>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e019      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x4b4>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	bf94      	ite	ls
 8002c76:	2301      	movls	r3, #1
 8002c78:	2300      	movhi	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d079      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x4d4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	069b      	lsls	r3, r3, #26
 8002c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9a:	e015      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x500>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x520>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	e017      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x550>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e003      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	ea42 0103 	orr.w	r1, r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x576>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	051b      	lsls	r3, r3, #20
 8002d3c:	e018      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x5a8>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e003      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	430b      	orrs	r3, r1
 8002d72:	e07e      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x5c8>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8e:	e015      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x5f4>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x614>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	e017      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x644>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	61fb      	str	r3, [r7, #28]
  return result;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002df4:	2320      	movs	r3, #32
 8002df6:	e003      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10d      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x670>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b1e      	subs	r3, #30
 8002e30:	051b      	lsls	r3, r3, #20
 8002e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e36:	e01b      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x6a8>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	613b      	str	r3, [r7, #16]
  return result;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 021f 	and.w	r2, r3, #31
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	3b1e      	subs	r3, #30
 8002e6a:	051b      	lsls	r3, r3, #20
 8002e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fe fe72 	bl	8001b60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80be 	beq.w	8003006 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x6d6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_ADC_ConfigChannel+0x6e4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x6ec>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x6ee>
 8002ea2:	bf00      	nop
 8002ea4:	407f0000 	.word	0x407f0000
 8002ea8:	80080000 	.word	0x80080000
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	50000300 	.word	0x50000300
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fd54 	bl	8001964 <LL_ADC_GetCommonPathInternalCh>
 8002ebc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a56      	ldr	r2, [pc, #344]	; (8003020 <HAL_ADC_ConfigChannel+0x858>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x70c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_ADC_ConfigChannel+0x85c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d13a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d134      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee8:	d005      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0x72e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_ADC_ConfigChannel+0x860>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	f040 8085 	bne.w	8003000 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x742>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a49      	ldr	r2, [pc, #292]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x746>
 8002f0a:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x748>
 8002f0e:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f7fe fd0f 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f20:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_ADC_ConfigChannel+0x86c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	4a44      	ldr	r2, [pc, #272]	; (8003038 <HAL_ADC_ConfigChannel+0x870>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3a:	e002      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f48:	e05a      	b.n	8003000 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_ADC_ConfigChannel+0x874>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d125      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11f      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d104      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x7ac>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_ADC_ConfigChannel+0x878>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d047      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x7c0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7c4>
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7c6>
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fe fcd0 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9e:	e031      	b.n	8003004 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_ADC_ConfigChannel+0x87c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d127      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x80c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x810>
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_ConfigChannel+0x812>
 8002fd8:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fe fcaa 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
 8002fea:	e00c      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800300e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003012:	4618      	mov	r0, r3
 8003014:	37d8      	adds	r7, #216	; 0xd8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	50000700 	.word	0x50000700
 8003020:	c3210000 	.word	0xc3210000
 8003024:	90c00010 	.word	0x90c00010
 8003028:	50000600 	.word	0x50000600
 800302c:	50000100 	.word	0x50000100
 8003030:	50000300 	.word	0x50000300
 8003034:	20000000 	.word	0x20000000
 8003038:	053e2d63 	.word	0x053e2d63
 800303c:	c7520000 	.word	0xc7520000
 8003040:	50000500 	.word	0x50000500
 8003044:	cb840000 	.word	0xcb840000

08003048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fe4f 	bl	8001cfc <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d176      	bne.n	8003152 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	4b3c      	ldr	r3, [pc, #240]	; (800315c <ADC_Enable+0x114>)
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e062      	b.n	8003154 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fe1e 	bl	8001cd4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a0:	d004      	beq.n	80030ac <ADC_Enable+0x64>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2e      	ldr	r2, [pc, #184]	; (8003160 <ADC_Enable+0x118>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <ADC_Enable+0x68>
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <ADC_Enable+0x11c>)
 80030ae:	e000      	b.n	80030b2 <ADC_Enable+0x6a>
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <ADC_Enable+0x120>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fc56 	bl	8001964 <LL_ADC_GetCommonPathInternalCh>
 80030b8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <ADC_Enable+0x124>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <ADC_Enable+0x128>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030dc:	e002      	b.n	80030e4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fc09 	bl	8001900 <HAL_GetTick>
 80030ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f0:	e028      	b.n	8003144 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fe00 	bl	8001cfc <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fde4 	bl	8001cd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800310c:	f7fe fbf8 	bl	8001900 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d914      	bls.n	8003144 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d00d      	beq.n	8003144 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f043 0210 	orr.w	r2, r3, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d1cf      	bne.n	80030f2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	8000003f 	.word	0x8000003f
 8003160:	50000100 	.word	0x50000100
 8003164:	50000300 	.word	0x50000300
 8003168:	50000700 	.word	0x50000700
 800316c:	20000000 	.word	0x20000000
 8003170:	053e2d63 	.word	0x053e2d63

08003174 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d14b      	bne.n	8003226 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d021      	beq.n	80031ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fc85 	bl	8001abc <LL_ADC_REG_IsTriggerSourceSWStart>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d032      	beq.n	800321e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12b      	bne.n	800321e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11f      	bne.n	800321e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ea:	e018      	b.n	800321e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d111      	bne.n	800321e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff faaa 	bl	8002778 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003224:	e00e      	b.n	8003244 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff fabe 	bl	80027b4 <HAL_ADC_ErrorCallback>
}
 8003238:	e004      	b.n	8003244 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fa96 	bl	800278c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff fa90 	bl	80027b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <LL_ADC_IsEnabled>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_IsEnabled+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_IsEnabled+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d101      	bne.n	80032da <LL_ADC_REG_IsConversionOngoing+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b0a1      	sub	sp, #132	; 0x84
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003366:	2302      	movs	r3, #2
 8003368:	e0e7      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003372:	2300      	movs	r3, #0
 8003374:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003376:	2300      	movs	r3, #0
 8003378:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003382:	d102      	bne.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	e009      	b.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d102      	bne.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003394:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	e001      	b.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0be      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff7f 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 80033c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff79 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 80a0 	bne.w	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 809c 	bne.w	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e8:	d004      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033f4:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d04b      	beq.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003416:	035b      	lsls	r3, r3, #13
 8003418:	430b      	orrs	r3, r1
 800341a:	431a      	orrs	r2, r3
 800341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003428:	d004      	beq.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a45      	ldr	r2, [pc, #276]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10f      	bne.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003434:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003438:	f7ff ff30 	bl	800329c <LL_ADC_IsEnabled>
 800343c:	4604      	mov	r4, r0
 800343e:	4841      	ldr	r0, [pc, #260]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003440:	f7ff ff2c 	bl	800329c <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	4323      	orrs	r3, r4
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e012      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003454:	483c      	ldr	r0, [pc, #240]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003456:	f7ff ff21 	bl	800329c <LL_ADC_IsEnabled>
 800345a:	4604      	mov	r4, r0
 800345c:	483b      	ldr	r0, [pc, #236]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800345e:	f7ff ff1d 	bl	800329c <LL_ADC_IsEnabled>
 8003462:	4603      	mov	r3, r0
 8003464:	431c      	orrs	r4, r3
 8003466:	483c      	ldr	r0, [pc, #240]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003468:	f7ff ff18 	bl	800329c <LL_ADC_IsEnabled>
 800346c:	4603      	mov	r3, r0
 800346e:	4323      	orrs	r3, r4
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d056      	beq.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800347e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003486:	f023 030f 	bic.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	6811      	ldr	r1, [r2, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	430a      	orrs	r2, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800349a:	e047      	b.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10f      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034c0:	f7ff feec 	bl	800329c <LL_ADC_IsEnabled>
 80034c4:	4604      	mov	r4, r0
 80034c6:	481f      	ldr	r0, [pc, #124]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c8:	f7ff fee8 	bl	800329c <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4323      	orrs	r3, r4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034dc:	481a      	ldr	r0, [pc, #104]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034de:	f7ff fedd 	bl	800329c <LL_ADC_IsEnabled>
 80034e2:	4604      	mov	r4, r0
 80034e4:	4819      	ldr	r0, [pc, #100]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034e6:	f7ff fed9 	bl	800329c <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	431c      	orrs	r4, r3
 80034ee:	481a      	ldr	r0, [pc, #104]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034f0:	f7ff fed4 	bl	800329c <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4323      	orrs	r3, r4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d012      	beq.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800350e:	f023 030f 	bic.w	r3, r3, #15
 8003512:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003514:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003516:	e009      	b.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800352a:	e000      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800352c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003536:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800353a:	4618      	mov	r0, r3
 800353c:	3784      	adds	r7, #132	; 0x84
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	bf00      	nop
 8003544:	50000100 	.word	0x50000100
 8003548:	50000400 	.word	0x50000400
 800354c:	50000500 	.word	0x50000500
 8003550:	50000300 	.word	0x50000300
 8003554:	50000700 	.word	0x50000700
 8003558:	50000600 	.word	0x50000600

0800355c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	60d3      	str	r3, [r2, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_GetPriorityGrouping+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0307 	and.w	r3, r3, #7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db0b      	blt.n	80035ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4907      	ldr	r1, [pc, #28]	; (80035f8 <__NVIC_EnableIRQ+0x38>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2001      	movs	r0, #1
 80035e2:	fa00 f202 	lsl.w	r2, r0, r2
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f7ff ff8e 	bl	80035fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff29 	bl	800355c <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff40 	bl	80035a4 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff90 	bl	8003650 <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5f 	bl	80035fc <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff33 	bl	80035c0 <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa4 	bl	80036b8 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e08d      	b.n	80038aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_DMA_Init+0x138>)
 8003796:	429a      	cmp	r2, r3
 8003798:	d80f      	bhi.n	80037ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	4b45      	ldr	r3, [pc, #276]	; (80038b8 <HAL_DMA_Init+0x13c>)
 80037a2:	4413      	add	r3, r2
 80037a4:	4a45      	ldr	r2, [pc, #276]	; (80038bc <HAL_DMA_Init+0x140>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	009a      	lsls	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a42      	ldr	r2, [pc, #264]	; (80038c0 <HAL_DMA_Init+0x144>)
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
 80037b8:	e00e      	b.n	80037d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_DMA_Init+0x148>)
 80037c2:	4413      	add	r3, r2
 80037c4:	4a3d      	ldr	r2, [pc, #244]	; (80038bc <HAL_DMA_Init+0x140>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <HAL_DMA_Init+0x14c>)
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9b6 	bl	8003b9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003838:	d102      	bne.n	8003840 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003854:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_DMA_Init+0x104>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d80c      	bhi.n	8003880 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9d6 	bl	8003c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e008      	b.n	8003892 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40020407 	.word	0x40020407
 80038b8:	bffdfff8 	.word	0xbffdfff8
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	40020000 	.word	0x40020000
 80038c4:	bffdfbf8 	.word	0xbffdfbf8
 80038c8:	40020400 	.word	0x40020400

080038cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_Start_IT+0x20>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e066      	b.n	80039ba <HAL_DMA_Start_IT+0xee>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d155      	bne.n	80039ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f8fb 	bl	8003b20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 020e 	orr.w	r2, r2, #14
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e00f      	b.n	8003964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 020a 	orr.w	r2, r2, #10
 8003962:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003980:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e005      	b.n	80039b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2204      	movs	r2, #4
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d026      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x7a>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d021      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2104      	movs	r1, #4
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d071      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a3a:	e06c      	b.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2202      	movs	r2, #2
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02e      	beq.n	8003aae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d029      	beq.n	8003aae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020a 	bic.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d038      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003aac:	e033      	b.n	8003b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02a      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d025      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 020e 	bic.w	r2, r2, #14
 8003ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
}
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 021f 	and.w	r2, r3, #31
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2101      	movs	r1, #1
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d108      	bne.n	8003b80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b7e:	e007      	b.n	8003b90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d802      	bhi.n	8003bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e001      	b.n	8003bba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bb8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3b08      	subs	r3, #8
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003be6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2201      	movs	r2, #1
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40020407 	.word	0x40020407
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40020820 	.word	0x40020820
 8003c10:	cccccccd 	.word	0xcccccccd
 8003c14:	40020880 	.word	0x40020880

08003c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	461a      	mov	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	1000823f 	.word	0x1000823f
 8003c5c:	40020940 	.word	0x40020940

08003c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c6e:	e15a      	b.n	8003f26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 814c 	beq.w	8003f20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d005      	beq.n	8003ca0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d130      	bne.n	8003d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0201 	and.w	r2, r3, #1
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d017      	beq.n	8003d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d123      	bne.n	8003d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3208      	adds	r2, #8
 8003d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	6939      	ldr	r1, [r7, #16]
 8003d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0203 	and.w	r2, r3, #3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80a6 	beq.w	8003f20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd4:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_GPIO_Init+0x2e4>)
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_GPIO_Init+0x2e4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6613      	str	r3, [r2, #96]	; 0x60
 8003de0:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <HAL_GPIO_Init+0x2e4>)
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dec:	4a56      	ldr	r2, [pc, #344]	; (8003f48 <HAL_GPIO_Init+0x2e8>)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	220f      	movs	r2, #15
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e16:	d01f      	beq.n	8003e58 <HAL_GPIO_Init+0x1f8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <HAL_GPIO_Init+0x2ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d019      	beq.n	8003e54 <HAL_GPIO_Init+0x1f4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <HAL_GPIO_Init+0x2f0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_GPIO_Init+0x1f0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4a      	ldr	r2, [pc, #296]	; (8003f54 <HAL_GPIO_Init+0x2f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1ec>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a49      	ldr	r2, [pc, #292]	; (8003f58 <HAL_GPIO_Init+0x2f8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1e8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a48      	ldr	r2, [pc, #288]	; (8003f5c <HAL_GPIO_Init+0x2fc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1e4>
 8003e40:	2305      	movs	r3, #5
 8003e42:	e00a      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e44:	2306      	movs	r3, #6
 8003e46:	e008      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	e006      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e004      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e002      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_GPIO_Init+0x1fa>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	f002 0203 	and.w	r2, r2, #3
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	4093      	lsls	r3, r2
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e6a:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_GPIO_Init+0x2e8>)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e9c:	4a30      	ldr	r2, [pc, #192]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ea2:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ec6:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f1a:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <HAL_GPIO_Init+0x300>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3301      	adds	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f47f ae9d 	bne.w	8003c70 <HAL_GPIO_Init+0x10>
  }
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	48000400 	.word	0x48000400
 8003f50:	48000800 	.word	0x48000800
 8003f54:	48000c00 	.word	0x48000c00
 8003f58:	48001000 	.word	0x48001000
 8003f5c:	48001400 	.word	0x48001400
 8003f60:	40010400 	.word	0x40010400

08003f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
 8003f70:	4613      	mov	r3, r2
 8003f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f74:	787b      	ldrb	r3, [r7, #1]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f80:	e002      	b.n	8003f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f806 	bl	8003fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d141      	bne.n	800406e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fea:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d131      	bne.n	800405c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff8:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	4a46      	ldr	r2, [pc, #280]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004008:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004010:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004018:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2232      	movs	r2, #50	; 0x32
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	0c9b      	lsrs	r3, r3, #18
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800402e:	e002      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b01      	subs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d102      	bne.n	800404a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f2      	bne.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404a:	4b33      	ldr	r3, [pc, #204]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d158      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e057      	b.n	800410c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800405c:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004062:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800406c:	e04d      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004074:	d141      	bne.n	80040fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004076:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	d131      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004094:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800409c:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2232      	movs	r2, #50	; 0x32
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9b      	lsrs	r3, r3, #18
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ba:	e002      	b.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d102      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f2      	bne.n	80040bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d112      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e011      	b.n	800410c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040f8:	e007      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004108:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40007000 	.word	0x40007000
 800411c:	20000000 	.word	0x20000000
 8004120:	431bde83 	.word	0x431bde83

08004124 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800412e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004132:	6093      	str	r3, [r2, #8]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40007000 	.word	0x40007000

08004144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e2fe      	b.n	8004754 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d075      	beq.n	800424e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004162:	4b97      	ldr	r3, [pc, #604]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416c:	4b94      	ldr	r3, [pc, #592]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d102      	bne.n	8004182 <HAL_RCC_OscConfig+0x3e>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d002      	beq.n	8004188 <HAL_RCC_OscConfig+0x44>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d10b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	4b8d      	ldr	r3, [pc, #564]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05b      	beq.n	800424c <HAL_RCC_OscConfig+0x108>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d157      	bne.n	800424c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e2d9      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_OscConfig+0x74>
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a84      	ldr	r2, [pc, #528]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xb0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x98>
 80041c2:	4b7f      	ldr	r3, [pc, #508]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7e      	ldr	r2, [pc, #504]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b7c      	ldr	r3, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a7b      	ldr	r2, [pc, #492]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xb0>
 80041dc:	4b78      	ldr	r3, [pc, #480]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a77      	ldr	r2, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b75      	ldr	r3, [pc, #468]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a74      	ldr	r2, [pc, #464]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fb80 	bl	8001900 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fd fb7c 	bl	8001900 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e29e      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xc0>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fb6c 	bl	8001900 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fb68 	bl	8001900 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e28a      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	4b60      	ldr	r3, [pc, #384]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0xe8>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d075      	beq.n	8004346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425a:	4b59      	ldr	r3, [pc, #356]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004264:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d102      	bne.n	800427a <HAL_RCC_OscConfig+0x136>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d002      	beq.n	8004280 <HAL_RCC_OscConfig+0x13c>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11f      	bne.n	80042c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_OscConfig+0x154>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e25d      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004298:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	4946      	ldr	r1, [pc, #280]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd fad9 	bl	8001868 <HAL_InitTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e249      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3c      	ldr	r2, [pc, #240]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fb14 	bl	8001900 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fd fb10 	bl	8001900 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e232      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	492d      	ldr	r1, [pc, #180]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	e01a      	b.n	8004346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd faf0 	bl	8001900 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fd faec 	bl	8001900 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e20e      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1e0>
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d041      	beq.n	80043d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01c      	beq.n	8004394 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fd fac9 	bl	8001900 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004372:	f7fd fac5 	bl	8001900 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1e7      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0ef      	beq.n	8004372 <HAL_RCC_OscConfig+0x22e>
 8004392:	e020      	b.n	80043d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd faac 	bl	8001900 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043aa:	e00d      	b.n	80043c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fd faa8 	bl	8001900 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d906      	bls.n	80043c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1ca      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043c8:	4b8c      	ldr	r3, [pc, #560]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ea      	bne.n	80043ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80a6 	beq.w	8004530 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043e8:	4b84      	ldr	r3, [pc, #528]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_OscConfig+0x2b4>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x2b6>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	4b7f      	ldr	r3, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	4a7e      	ldr	r2, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
 800440a:	4b7c      	ldr	r3, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441a:	4b79      	ldr	r3, [pc, #484]	; (8004600 <HAL_RCC_OscConfig+0x4bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x4bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	; (8004600 <HAL_RCC_OscConfig+0x4bc>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fd fa65 	bl	8001900 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fd fa61 	bl	8001900 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e183      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444c:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x4bc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d108      	bne.n	8004472 <HAL_RCC_OscConfig+0x32e>
 8004460:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a65      	ldr	r2, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004470:	e024      	b.n	80044bc <HAL_RCC_OscConfig+0x378>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b05      	cmp	r3, #5
 8004478:	d110      	bne.n	800449c <HAL_RCC_OscConfig+0x358>
 800447a:	4b60      	ldr	r3, [pc, #384]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	4a5e      	ldr	r2, [pc, #376]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448a:	4b5c      	ldr	r3, [pc, #368]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	4a5a      	ldr	r2, [pc, #360]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800449a:	e00f      	b.n	80044bc <HAL_RCC_OscConfig+0x378>
 800449c:	4b57      	ldr	r3, [pc, #348]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a56      	ldr	r2, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d016      	beq.n	80044f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fa1c 	bl	8001900 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fa18 	bl	8001900 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e138      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ed      	beq.n	80044cc <HAL_RCC_OscConfig+0x388>
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fd fa05 	bl	8001900 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fd fa01 	bl	8001900 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	; 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e121      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004510:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ed      	bne.n	80044fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	4b35      	ldr	r3, [pc, #212]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	4a34      	ldr	r2, [pc, #208]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454a:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd f9d4 	bl	8001900 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800455c:	f7fd f9d0 	bl	8001900 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0f2      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x418>
 800457c:	e01b      	b.n	80045b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800457e:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004584:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fd f9b7 	bl	8001900 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004596:	f7fd f9b3 	bl	8001900 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0d5      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80045aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ef      	bne.n	8004596 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80c9 	beq.w	8004752 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	f000 8083 	beq.w	80046d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d15e      	bne.n	8004694 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd f98d 	bl	8001900 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e8:	e00c      	b.n	8004604 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fd f989 	bl	8001900 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d905      	bls.n	8004604 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0ab      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004604:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ec      	bne.n	80045ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004610:	4b52      	ldr	r3, [pc, #328]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x61c>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6a11      	ldr	r1, [r2, #32]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004620:	3a01      	subs	r2, #1
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800462a:	0212      	lsls	r2, r2, #8
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004632:	0852      	lsrs	r2, r2, #1
 8004634:	3a01      	subs	r2, #1
 8004636:	0552      	lsls	r2, r2, #21
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800463e:	0852      	lsrs	r2, r2, #1
 8004640:	3a01      	subs	r2, #1
 8004642:	0652      	lsls	r2, r2, #25
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800464a:	06d2      	lsls	r2, r2, #27
 800464c:	430a      	orrs	r2, r1
 800464e:	4943      	ldr	r1, [pc, #268]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004650:	4313      	orrs	r3, r2
 8004652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004654:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a40      	ldr	r2, [pc, #256]	; (800475c <HAL_RCC_OscConfig+0x618>)
 800465a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800465e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004660:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a3d      	ldr	r2, [pc, #244]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd f948 	bl	8001900 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004674:	f7fd f944 	bl	8001900 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e066      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004686:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x530>
 8004692:	e05e      	b.n	8004752 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b31      	ldr	r3, [pc, #196]	; (800475c <HAL_RCC_OscConfig+0x618>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_RCC_OscConfig+0x618>)
 800469a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd f92e 	bl	8001900 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fd f92a 	bl	8001900 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e04c      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ba:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_RCC_OscConfig+0x618>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046c6:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_OscConfig+0x618>)
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	4924      	ldr	r1, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x618>)
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_RCC_OscConfig+0x620>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60cb      	str	r3, [r1, #12]
 80046d2:	e03e      	b.n	8004752 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e039      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x618>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d12c      	bne.n	800474e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d123      	bne.n	800474e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11b      	bne.n	800474e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d113      	bne.n	800474e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d109      	bne.n	800474e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	019f800c 	.word	0x019f800c
 8004764:	feeefffc 	.word	0xfeeefffc

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e11e      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d910      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b8e      	ldr	r3, [pc, #568]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 020f 	bic.w	r2, r3, #15
 8004796:	498c      	ldr	r1, [pc, #560]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b8a      	ldr	r3, [pc, #552]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e106      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d073      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d129      	bne.n	8004818 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c4:	4b81      	ldr	r3, [pc, #516]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0f4      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047d4:	f000 f99e 	bl	8004b14 <RCC_GetSysClockFreqFromPLLSource>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_RCC_ClockConfig+0x268>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d93f      	bls.n	8004862 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047e2:	4b7a      	ldr	r3, [pc, #488]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d033      	beq.n	8004862 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d12f      	bne.n	8004862 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004802:	4b72      	ldr	r3, [pc, #456]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480a:	4a70      	ldr	r2, [pc, #448]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e024      	b.n	8004862 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d107      	bne.n	8004830 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0c6      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	4b66      	ldr	r3, [pc, #408]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0be      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004840:	f000 f8ce 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4a61      	ldr	r2, [pc, #388]	; (80049d0 <HAL_RCC_ClockConfig+0x268>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d909      	bls.n	8004862 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800484e:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004856:	4a5d      	ldr	r2, [pc, #372]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004862:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4957      	ldr	r1, [pc, #348]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004874:	f7fd f844 	bl	8001900 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	e00a      	b.n	8004892 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fd f840 	bl	8001900 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e095      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	4b4e      	ldr	r3, [pc, #312]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 020c 	and.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1eb      	bne.n	800487c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d023      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a42      	ldr	r2, [pc, #264]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048d4:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048dc:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b39      	ldr	r3, [pc, #228]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4936      	ldr	r1, [pc, #216]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
 80048f6:	e008      	b.n	800490a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d105      	bne.n	800490a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004908:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490a:	4b2f      	ldr	r3, [pc, #188]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d21d      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 020f 	bic.w	r2, r3, #15
 8004920:	4929      	ldr	r1, [pc, #164]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004928:	f7fc ffea 	bl	8001900 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fc ffe6 	bl	8001900 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e03b      	b.n	80049be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x260>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d1ed      	bne.n	8004930 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4917      	ldr	r1, [pc, #92]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490f      	ldr	r1, [pc, #60]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004992:	f000 f825 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCC_ClockConfig+0x264>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490c      	ldr	r1, [pc, #48]	; (80049d4 <HAL_RCC_ClockConfig+0x26c>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x270>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x274>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc ff56 	bl	8001868 <HAL_InitTick>
 80049bc:	4603      	mov	r3, r0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40022000 	.word	0x40022000
 80049cc:	40021000 	.word	0x40021000
 80049d0:	04c4b400 	.word	0x04c4b400
 80049d4:	08007450 	.word	0x08007450
 80049d8:	20000000 	.word	0x20000000
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e047      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a04:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e03e      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d136      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a34:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3e:	68d2      	ldr	r2, [r2, #12]
 8004a40:	0a12      	lsrs	r2, r2, #8
 8004a42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e00c      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	0a12      	lsrs	r2, r2, #8
 8004a5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
      break;
 8004a66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0e5b      	lsrs	r3, r3, #25
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	3301      	adds	r3, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e001      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a88:	693b      	ldr	r3, [r7, #16]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	00f42400 	.word	0x00f42400
 8004aa0:	016e3600 	.word	0x016e3600

08004aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000000 	.word	0x20000000

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	08007460 	.word	0x08007460

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004aec:	f7ff ffda 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0adb      	lsrs	r3, r3, #11
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4904      	ldr	r1, [pc, #16]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	08007460 	.word	0x08007460

08004b14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d10c      	bne.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b38:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b42:	68d2      	ldr	r2, [r2, #12]
 8004b44:	0a12      	lsrs	r2, r2, #8
 8004b46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]
    break;
 8004b50:	e00c      	b.n	8004b6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	0a12      	lsrs	r2, r2, #8
 8004b60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    break;
 8004b6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0e5b      	lsrs	r3, r3, #25
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	016e3600 	.word	0x016e3600
 8004b9c:	00f42400 	.word	0x00f42400

08004ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba8:	2300      	movs	r3, #0
 8004baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8098 	beq.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc2:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bda:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be6:	2301      	movs	r3, #1
 8004be8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf6:	f7fc fe83 	bl	8001900 <HAL_GetTick>
 8004bfa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bfc:	e009      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fc fe7f 	bl	8001900 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d902      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	74fb      	strb	r3, [r7, #19]
        break;
 8004c10:	e005      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d159      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c24:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01e      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d019      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c40:	4b23      	ldr	r3, [pc, #140]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5c:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fe3f 	bl	8001900 <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c84:	e00b      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fc fe3b 	bl	8001900 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d902      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ec      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc8:	e008      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	74bb      	strb	r3, [r7, #18]
 8004cce:	e005      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cdc:	7c7b      	ldrb	r3, [r7, #17]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce2:	4ba7      	ldr	r3, [pc, #668]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	4aa6      	ldr	r2, [pc, #664]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfa:	4ba1      	ldr	r3, [pc, #644]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f023 0203 	bic.w	r2, r3, #3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	499d      	ldr	r1, [pc, #628]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d1c:	4b98      	ldr	r3, [pc, #608]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f023 020c 	bic.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4995      	ldr	r1, [pc, #596]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d3e:	4b90      	ldr	r3, [pc, #576]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	498c      	ldr	r1, [pc, #560]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d60:	4b87      	ldr	r3, [pc, #540]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4984      	ldr	r1, [pc, #528]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d82:	4b7f      	ldr	r3, [pc, #508]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	497b      	ldr	r1, [pc, #492]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da4:	4b76      	ldr	r3, [pc, #472]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	4973      	ldr	r1, [pc, #460]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc6:	4b6e      	ldr	r3, [pc, #440]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	496a      	ldr	r1, [pc, #424]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de8:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4962      	ldr	r1, [pc, #392]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	4959      	ldr	r1, [pc, #356]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2c:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	4951      	ldr	r1, [pc, #324]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4948      	ldr	r1, [pc, #288]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e70:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4940      	ldr	r1, [pc, #256]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ea8:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	4932      	ldr	r1, [pc, #200]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	4924      	ldr	r1, [pc, #144]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efe:	d105      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	4916      	ldr	r1, [pc, #88]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4908      	ldr	r1, [pc, #32]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a02      	ldr	r2, [pc, #8]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7a:	60d3      	str	r3, [r2, #12]
 8004f7c:	e002      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f90:	4b29      	ldr	r3, [pc, #164]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	4926      	ldr	r1, [pc, #152]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fb0:	4b21      	ldr	r3, [pc, #132]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a20      	ldr	r2, [pc, #128]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	4918      	ldr	r1, [pc, #96]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a12      	ldr	r2, [pc, #72]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	490a      	ldr	r1, [pc, #40]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800502c:	7cbb      	ldrb	r3, [r7, #18]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e049      	b.n	80050e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc facc 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 fd78 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e04c      	b.n	800519e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_TIM_Base_Start+0xc0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d022      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d01d      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_TIM_Base_Start+0xc4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d018      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <HAL_TIM_Base_Start+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_TIM_Base_Start+0xcc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00e      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_TIM_Base_Start+0xd0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_TIM_Base_Start+0xd4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIM_Base_Start+0x70>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_TIM_Base_Start+0xd8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d115      	bne.n	8005188 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_TIM_Base_Start+0xdc>)
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b06      	cmp	r3, #6
 800516c:	d015      	beq.n	800519a <HAL_TIM_Base_Start+0xae>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d011      	beq.n	800519a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e008      	b.n	800519a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e000      	b.n	800519c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40015000 	.word	0x40015000
 80051c8:	00010007 	.word	0x00010007

080051cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e049      	b.n	8005272 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f841 	bl	800527a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f000 fcb0 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x24>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e03c      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_PWM_Start+0x3e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e02f      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x58>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e022      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d109      	bne.n	8005302 <HAL_TIM_PWM_Start+0x72>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e015      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b10      	cmp	r3, #16
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x8c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e008      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0a6      	b.n	8005484 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0xb6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005344:	e023      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0xc6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005354:	e01b      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005364:	e013      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xe6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005374:	e00b      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b10      	cmp	r3, #16
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xf6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005384:	e003      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f864 	bl	8006464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3a      	ldr	r2, [pc, #232]	; (800548c <HAL_TIM_PWM_Start+0x1fc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a39      	ldr	r2, [pc, #228]	; (8005490 <HAL_TIM_PWM_Start+0x200>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a37      	ldr	r2, [pc, #220]	; (8005494 <HAL_TIM_PWM_Start+0x204>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a36      	ldr	r2, [pc, #216]	; (8005498 <HAL_TIM_PWM_Start+0x208>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a34      	ldr	r2, [pc, #208]	; (800549c <HAL_TIM_PWM_Start+0x20c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a33      	ldr	r2, [pc, #204]	; (80054a0 <HAL_TIM_PWM_Start+0x210>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_PWM_Start+0x14c>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_TIM_PWM_Start+0x14e>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a25      	ldr	r2, [pc, #148]	; (800548c <HAL_TIM_PWM_Start+0x1fc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d022      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d01d      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <HAL_TIM_PWM_Start+0x214>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d018      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <HAL_TIM_PWM_Start+0x218>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a23      	ldr	r2, [pc, #140]	; (80054ac <HAL_TIM_PWM_Start+0x21c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <HAL_TIM_PWM_Start+0x200>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_TIM_PWM_Start+0x204>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_PWM_Start+0x1b2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIM_PWM_Start+0x210>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d115      	bne.n	800546e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_TIM_PWM_Start+0x220>)
 800544a:	4013      	ands	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d015      	beq.n	8005480 <HAL_TIM_PWM_Start+0x1f0>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545a:	d011      	beq.n	8005480 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	e008      	b.n	8005480 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e000      	b.n	8005482 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800
 80054a0:	40015000 	.word	0x40015000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	00010007 	.word	0x00010007

080054b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e097      	b.n	80055f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fc f8af 	bl	8001640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f000 fb31 	bl	8005b70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	4313      	orrs	r3, r2
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005554:	f023 030c 	bic.w	r3, r3, #12
 8005558:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	4313      	orrs	r3, r2
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	031b      	lsls	r3, r3, #12
 8005584:	4313      	orrs	r3, r2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	4313      	orrs	r3, r2
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005610:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005618:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005620:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005628:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d110      	bne.n	8005652 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d102      	bne.n	800563c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005636:	7b7b      	ldrb	r3, [r7, #13]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d001      	beq.n	8005640 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e069      	b.n	8005714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005650:	e031      	b.n	80056b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d110      	bne.n	800567a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800565e:	7b3b      	ldrb	r3, [r7, #12]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e055      	b.n	8005714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005678:	e01d      	b.n	80056b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d108      	bne.n	8005692 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d105      	bne.n	8005692 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005686:	7b7b      	ldrb	r3, [r7, #13]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800568c:	7b3b      	ldrb	r3, [r7, #12]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e03e      	b.n	8005714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_TIM_Encoder_Start+0xc4>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d008      	beq.n	80056d4 <HAL_TIM_Encoder_Start+0xd4>
 80056c2:	e00f      	b.n	80056e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fec9 	bl	8006464 <TIM_CCxChannelCmd>
      break;
 80056d2:	e016      	b.n	8005702 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	2104      	movs	r1, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fec1 	bl	8006464 <TIM_CCxChannelCmd>
      break;
 80056e2:	e00e      	b.n	8005702 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 feb9 	bl	8006464 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	2104      	movs	r1, #4
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 feb2 	bl	8006464 <TIM_CCxChannelCmd>
      break;
 8005700:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005736:	2302      	movs	r3, #2
 8005738:	e0ff      	b.n	800593a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b14      	cmp	r3, #20
 8005746:	f200 80f0 	bhi.w	800592a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	080057a5 	.word	0x080057a5
 8005754:	0800592b 	.word	0x0800592b
 8005758:	0800592b 	.word	0x0800592b
 800575c:	0800592b 	.word	0x0800592b
 8005760:	080057e5 	.word	0x080057e5
 8005764:	0800592b 	.word	0x0800592b
 8005768:	0800592b 	.word	0x0800592b
 800576c:	0800592b 	.word	0x0800592b
 8005770:	08005827 	.word	0x08005827
 8005774:	0800592b 	.word	0x0800592b
 8005778:	0800592b 	.word	0x0800592b
 800577c:	0800592b 	.word	0x0800592b
 8005780:	08005867 	.word	0x08005867
 8005784:	0800592b 	.word	0x0800592b
 8005788:	0800592b 	.word	0x0800592b
 800578c:	0800592b 	.word	0x0800592b
 8005790:	080058a9 	.word	0x080058a9
 8005794:	0800592b 	.word	0x0800592b
 8005798:	0800592b 	.word	0x0800592b
 800579c:	0800592b 	.word	0x0800592b
 80057a0:	080058e9 	.word	0x080058e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fa94 	bl	8005cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6999      	ldr	r1, [r3, #24]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	619a      	str	r2, [r3, #24]
      break;
 80057e2:	e0a5      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fb0e 	bl	8005e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6999      	ldr	r1, [r3, #24]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	619a      	str	r2, [r3, #24]
      break;
 8005824:	e084      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fb81 	bl	8005f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0208 	orr.w	r2, r2, #8
 8005840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0204 	bic.w	r2, r2, #4
 8005850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69d9      	ldr	r1, [r3, #28]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	61da      	str	r2, [r3, #28]
      break;
 8005864:	e064      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fbf3 	bl	8006058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	021a      	lsls	r2, r3, #8
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	61da      	str	r2, [r3, #28]
      break;
 80058a6:	e043      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc66 	bl	8006180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0208 	orr.w	r2, r2, #8
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0204 	bic.w	r2, r2, #4
 80058d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80058e6:	e023      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fcb0 	bl	8006254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005902:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005912:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	021a      	lsls	r2, r3, #8
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005928:	e002      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
      break;
 800592e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop

08005944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIM_ConfigClockSource+0x1c>
 800595c:	2302      	movs	r3, #2
 800595e:	e0f6      	b.n	8005b4e <HAL_TIM_ConfigClockSource+0x20a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800597e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800598a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6f      	ldr	r2, [pc, #444]	; (8005b58 <HAL_TIM_ConfigClockSource+0x214>)
 800599a:	4293      	cmp	r3, r2
 800599c:	f000 80c1 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059a0:	4a6d      	ldr	r2, [pc, #436]	; (8005b58 <HAL_TIM_ConfigClockSource+0x214>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	f200 80c6 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059a8:	4a6c      	ldr	r2, [pc, #432]	; (8005b5c <HAL_TIM_ConfigClockSource+0x218>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	f000 80b9 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059b0:	4a6a      	ldr	r2, [pc, #424]	; (8005b5c <HAL_TIM_ConfigClockSource+0x218>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	f200 80be 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059b8:	4a69      	ldr	r2, [pc, #420]	; (8005b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	f000 80b1 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059c0:	4a67      	ldr	r2, [pc, #412]	; (8005b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	f200 80b6 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059c8:	4a66      	ldr	r2, [pc, #408]	; (8005b64 <HAL_TIM_ConfigClockSource+0x220>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f000 80a9 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059d0:	4a64      	ldr	r2, [pc, #400]	; (8005b64 <HAL_TIM_ConfigClockSource+0x220>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	f200 80ae 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059d8:	4a63      	ldr	r2, [pc, #396]	; (8005b68 <HAL_TIM_ConfigClockSource+0x224>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	f000 80a1 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059e0:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <HAL_TIM_ConfigClockSource+0x224>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	f200 80a6 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059e8:	4a60      	ldr	r2, [pc, #384]	; (8005b6c <HAL_TIM_ConfigClockSource+0x228>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	f000 8099 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 80059f0:	4a5e      	ldr	r2, [pc, #376]	; (8005b6c <HAL_TIM_ConfigClockSource+0x228>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	f200 809e 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80059f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059fc:	f000 8091 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a04:	f200 8096 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0c:	f000 8089 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a14:	f200 808e 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1c:	d03e      	beq.n	8005a9c <HAL_TIM_ConfigClockSource+0x158>
 8005a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a22:	f200 8087 	bhi.w	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2a:	f000 8086 	beq.w	8005b3a <HAL_TIM_ConfigClockSource+0x1f6>
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	d87f      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a34:	2b70      	cmp	r3, #112	; 0x70
 8005a36:	d01a      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x12a>
 8005a38:	2b70      	cmp	r3, #112	; 0x70
 8005a3a:	d87b      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d050      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x19e>
 8005a40:	2b60      	cmp	r3, #96	; 0x60
 8005a42:	d877      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a44:	2b50      	cmp	r3, #80	; 0x50
 8005a46:	d03c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x17e>
 8005a48:	2b50      	cmp	r3, #80	; 0x50
 8005a4a:	d873      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d058      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x1be>
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d86f      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a54:	2b30      	cmp	r3, #48	; 0x30
 8005a56:	d064      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a58:	2b30      	cmp	r3, #48	; 0x30
 8005a5a:	d86b      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d060      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d867      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05c      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d05a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x1de>
 8005a6c:	e062      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a7e:	f000 fcd1 	bl	8006424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	609a      	str	r2, [r3, #8]
      break;
 8005a9a:	e04f      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aac:	f000 fcba 	bl	8006424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005abe:	609a      	str	r2, [r3, #8]
      break;
 8005ac0:	e03c      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f000 fc2c 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2150      	movs	r1, #80	; 0x50
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fc85 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e02c      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 fc4b 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2160      	movs	r1, #96	; 0x60
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fc75 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005b00:	e01c      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fc0c 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2140      	movs	r1, #64	; 0x40
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fc65 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005b20:	e00c      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f000 fc5c 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005b32:	e003      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
      break;
 8005b38:	e000      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	00100070 	.word	0x00100070
 8005b5c:	00100060 	.word	0x00100060
 8005b60:	00100050 	.word	0x00100050
 8005b64:	00100040 	.word	0x00100040
 8005b68:	00100030 	.word	0x00100030
 8005b6c:	00100020 	.word	0x00100020

08005b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <TIM_Base_SetConfig+0x144>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d017      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d013      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a49      	ldr	r2, [pc, #292]	; (8005cb8 <TIM_Base_SetConfig+0x148>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a48      	ldr	r2, [pc, #288]	; (8005cbc <TIM_Base_SetConfig+0x14c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a47      	ldr	r2, [pc, #284]	; (8005cc0 <TIM_Base_SetConfig+0x150>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a46      	ldr	r2, [pc, #280]	; (8005cc4 <TIM_Base_SetConfig+0x154>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0x48>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a45      	ldr	r2, [pc, #276]	; (8005cc8 <TIM_Base_SetConfig+0x158>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a39      	ldr	r2, [pc, #228]	; (8005cb4 <TIM_Base_SetConfig+0x144>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d023      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01f      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a36      	ldr	r2, [pc, #216]	; (8005cb8 <TIM_Base_SetConfig+0x148>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01b      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a35      	ldr	r2, [pc, #212]	; (8005cbc <TIM_Base_SetConfig+0x14c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d017      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a34      	ldr	r2, [pc, #208]	; (8005cc0 <TIM_Base_SetConfig+0x150>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d013      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a33      	ldr	r2, [pc, #204]	; (8005cc4 <TIM_Base_SetConfig+0x154>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00f      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a33      	ldr	r2, [pc, #204]	; (8005ccc <TIM_Base_SetConfig+0x15c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a32      	ldr	r2, [pc, #200]	; (8005cd0 <TIM_Base_SetConfig+0x160>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <TIM_Base_SetConfig+0x164>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_Base_SetConfig+0xaa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <TIM_Base_SetConfig+0x158>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <TIM_Base_SetConfig+0x144>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x110>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <TIM_Base_SetConfig+0x154>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x110>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <TIM_Base_SetConfig+0x15c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x110>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <TIM_Base_SetConfig+0x160>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x110>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <TIM_Base_SetConfig+0x164>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x110>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <TIM_Base_SetConfig+0x158>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d103      	bne.n	8005c88 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d105      	bne.n	8005ca6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	611a      	str	r2, [r3, #16]
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40012c00 	.word	0x40012c00
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40015000 	.word	0x40015000
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f023 0201 	bic.w	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f023 0302 	bic.w	r3, r3, #2
 8005d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a30      	ldr	r2, [pc, #192]	; (8005df4 <TIM_OC1_SetConfig+0x11c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_OC1_SetConfig+0x88>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <TIM_OC1_SetConfig+0x120>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00f      	beq.n	8005d60 <TIM_OC1_SetConfig+0x88>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a2e      	ldr	r2, [pc, #184]	; (8005dfc <TIM_OC1_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_OC1_SetConfig+0x88>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a2d      	ldr	r2, [pc, #180]	; (8005e00 <TIM_OC1_SetConfig+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_OC1_SetConfig+0x88>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <TIM_OC1_SetConfig+0x12c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC1_SetConfig+0x88>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	; (8005e08 <TIM_OC1_SetConfig+0x130>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10c      	bne.n	8005d7a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0308 	bic.w	r3, r3, #8
 8005d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 0304 	bic.w	r3, r3, #4
 8005d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <TIM_OC1_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_OC1_SetConfig+0xd2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <TIM_OC1_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_OC1_SetConfig+0xd2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <TIM_OC1_SetConfig+0x124>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_OC1_SetConfig+0xd2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <TIM_OC1_SetConfig+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_OC1_SetConfig+0xd2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <TIM_OC1_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC1_SetConfig+0xd2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC1_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40015000 	.word	0x40015000

08005e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f023 0210 	bic.w	r2, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0320 	bic.w	r3, r3, #32
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <TIM_OC2_SetConfig+0x110>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_OC2_SetConfig+0x74>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <TIM_OC2_SetConfig+0x114>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC2_SetConfig+0x74>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <TIM_OC2_SetConfig+0x118>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10d      	bne.n	8005e9c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <TIM_OC2_SetConfig+0x110>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_OC2_SetConfig+0xc0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <TIM_OC2_SetConfig+0x114>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_OC2_SetConfig+0xc0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1e      	ldr	r2, [pc, #120]	; (8005f28 <TIM_OC2_SetConfig+0x11c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC2_SetConfig+0xc0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <TIM_OC2_SetConfig+0x120>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC2_SetConfig+0xc0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <TIM_OC2_SetConfig+0x124>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0xc0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <TIM_OC2_SetConfig+0x118>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40015000 	.word	0x40015000
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <TIM_OC3_SetConfig+0x10c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_OC3_SetConfig+0x72>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <TIM_OC3_SetConfig+0x110>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC3_SetConfig+0x72>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <TIM_OC3_SetConfig+0x114>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10d      	bne.n	8005fc2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <TIM_OC3_SetConfig+0x10c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xbe>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <TIM_OC3_SetConfig+0x110>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xbe>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <TIM_OC3_SetConfig+0x118>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xbe>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <TIM_OC3_SetConfig+0x11c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xbe>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <TIM_OC3_SetConfig+0x120>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <TIM_OC3_SetConfig+0x114>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d113      	bne.n	800601a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40013400 	.word	0x40013400
 8006048:	40015000 	.word	0x40015000
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800

08006058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	; (8006168 <TIM_OC4_SetConfig+0x110>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_OC4_SetConfig+0x74>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a2b      	ldr	r2, [pc, #172]	; (800616c <TIM_OC4_SetConfig+0x114>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC4_SetConfig+0x74>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a2a      	ldr	r2, [pc, #168]	; (8006170 <TIM_OC4_SetConfig+0x118>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10d      	bne.n	80060e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <TIM_OC4_SetConfig+0x110>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <TIM_OC4_SetConfig+0xc0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1e      	ldr	r2, [pc, #120]	; (800616c <TIM_OC4_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00f      	beq.n	8006118 <TIM_OC4_SetConfig+0xc0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <TIM_OC4_SetConfig+0x11c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00b      	beq.n	8006118 <TIM_OC4_SetConfig+0xc0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <TIM_OC4_SetConfig+0x120>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d007      	beq.n	8006118 <TIM_OC4_SetConfig+0xc0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <TIM_OC4_SetConfig+0x124>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC4_SetConfig+0xc0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <TIM_OC4_SetConfig+0x118>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d113      	bne.n	8006140 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006126:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	019b      	lsls	r3, r3, #6
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40015000 	.word	0x40015000
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800

08006180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a19      	ldr	r2, [pc, #100]	; (800623c <TIM_OC5_SetConfig+0xbc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_OC5_SetConfig+0x82>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <TIM_OC5_SetConfig+0xc0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_OC5_SetConfig+0x82>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <TIM_OC5_SetConfig+0xc4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_OC5_SetConfig+0x82>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a16      	ldr	r2, [pc, #88]	; (8006248 <TIM_OC5_SetConfig+0xc8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_OC5_SetConfig+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <TIM_OC5_SetConfig+0xcc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC5_SetConfig+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <TIM_OC5_SetConfig+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d109      	bne.n	8006216 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40013400 	.word	0x40013400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800
 8006250:	40015000 	.word	0x40015000

08006254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800629a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	051b      	lsls	r3, r3, #20
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1a      	ldr	r2, [pc, #104]	; (8006314 <TIM_OC6_SetConfig+0xc0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d013      	beq.n	80062d8 <TIM_OC6_SetConfig+0x84>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a19      	ldr	r2, [pc, #100]	; (8006318 <TIM_OC6_SetConfig+0xc4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00f      	beq.n	80062d8 <TIM_OC6_SetConfig+0x84>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <TIM_OC6_SetConfig+0xc8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00b      	beq.n	80062d8 <TIM_OC6_SetConfig+0x84>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <TIM_OC6_SetConfig+0xcc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <TIM_OC6_SetConfig+0x84>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <TIM_OC6_SetConfig+0xd0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC6_SetConfig+0x84>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <TIM_OC6_SetConfig+0xd4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d109      	bne.n	80062ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40013400 	.word	0x40013400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800
 8006328:	40015000 	.word	0x40015000

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	f043 0307 	orr.w	r3, r3, #7
 8006410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]
}
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800643e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	021a      	lsls	r2, r3, #8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	431a      	orrs	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4313      	orrs	r3, r2
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2201      	movs	r2, #1
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e074      	b.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a34      	ldr	r2, [pc, #208]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a31      	ldr	r2, [pc, #196]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d108      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800650c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d01d      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a11      	ldr	r2, [pc, #68]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10c      	bne.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800658c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	4313      	orrs	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40013400 	.word	0x40013400
 80065c8:	40015000 	.word	0x40015000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40014000 	.word	0x40014000

080065dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e078      	b.n	80066ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d11c      	bne.n	80066d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	051b      	lsls	r3, r3, #20
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40013400 	.word	0x40013400
 8006700:	40015000 	.word	0x40015000

08006704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e042      	b.n	800679c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fa ff11 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2224      	movs	r2, #36	; 0x24
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb24 	bl	8006d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f825 	bl	80067a4 <UART_SetConfig>
 800675a:	4603      	mov	r3, r0
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e01b      	b.n	800679c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fba3 	bl	8006ee0 <UART_CheckIdleState>
 800679a:	4603      	mov	r3, r0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b08c      	sub	sp, #48	; 0x30
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	431a      	orrs	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4baa      	ldr	r3, [pc, #680]	; (8006a7c <UART_SetConfig+0x2d8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067dc:	430b      	orrs	r3, r1
 80067de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a9f      	ldr	r2, [pc, #636]	; (8006a80 <UART_SetConfig+0x2dc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680c:	4313      	orrs	r3, r2
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800681a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006824:	430b      	orrs	r3, r1
 8006826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	f023 010f 	bic.w	r1, r3, #15
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a90      	ldr	r2, [pc, #576]	; (8006a84 <UART_SetConfig+0x2e0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d125      	bne.n	8006894 <UART_SetConfig+0xf0>
 8006848:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <UART_SetConfig+0x2e4>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d81a      	bhi.n	800688c <UART_SetConfig+0xe8>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0xb8>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006875 	.word	0x08006875
 8006868:	08006885 	.word	0x08006885
 800686c:	2301      	movs	r3, #1
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e116      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e112      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006882:	e10e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688a:	e10a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e106      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7c      	ldr	r2, [pc, #496]	; (8006a8c <UART_SetConfig+0x2e8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d138      	bne.n	8006910 <UART_SetConfig+0x16c>
 800689e:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <UART_SetConfig+0x2e4>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d82d      	bhi.n	8006908 <UART_SetConfig+0x164>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x110>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	08006909 	.word	0x08006909
 80068bc:	08006909 	.word	0x08006909
 80068c0:	08006909 	.word	0x08006909
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006909 	.word	0x08006909
 80068cc:	08006909 	.word	0x08006909
 80068d0:	08006909 	.word	0x08006909
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	08006909 	.word	0x08006909
 80068dc:	08006909 	.word	0x08006909
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006901 	.word	0x08006901
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e0d8      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e0d4      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e0d0      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e0cc      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690e:	e0c8      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5e      	ldr	r2, [pc, #376]	; (8006a90 <UART_SetConfig+0x2ec>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d125      	bne.n	8006966 <UART_SetConfig+0x1c2>
 800691a:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <UART_SetConfig+0x2e4>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d016      	beq.n	8006956 <UART_SetConfig+0x1b2>
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d818      	bhi.n	800695e <UART_SetConfig+0x1ba>
 800692c:	2b20      	cmp	r3, #32
 800692e:	d00a      	beq.n	8006946 <UART_SetConfig+0x1a2>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d814      	bhi.n	800695e <UART_SetConfig+0x1ba>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <UART_SetConfig+0x19a>
 8006938:	2b10      	cmp	r3, #16
 800693a:	d008      	beq.n	800694e <UART_SetConfig+0x1aa>
 800693c:	e00f      	b.n	800695e <UART_SetConfig+0x1ba>
 800693e:	2300      	movs	r3, #0
 8006940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006944:	e0ad      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006946:	2302      	movs	r3, #2
 8006948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694c:	e0a9      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800694e:	2304      	movs	r3, #4
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006954:	e0a5      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006956:	2308      	movs	r3, #8
 8006958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695c:	e0a1      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800695e:	2310      	movs	r3, #16
 8006960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006964:	e09d      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4a      	ldr	r2, [pc, #296]	; (8006a94 <UART_SetConfig+0x2f0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d125      	bne.n	80069bc <UART_SetConfig+0x218>
 8006970:	4b45      	ldr	r3, [pc, #276]	; (8006a88 <UART_SetConfig+0x2e4>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800697a:	2bc0      	cmp	r3, #192	; 0xc0
 800697c:	d016      	beq.n	80069ac <UART_SetConfig+0x208>
 800697e:	2bc0      	cmp	r3, #192	; 0xc0
 8006980:	d818      	bhi.n	80069b4 <UART_SetConfig+0x210>
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d00a      	beq.n	800699c <UART_SetConfig+0x1f8>
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d814      	bhi.n	80069b4 <UART_SetConfig+0x210>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <UART_SetConfig+0x1f0>
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d008      	beq.n	80069a4 <UART_SetConfig+0x200>
 8006992:	e00f      	b.n	80069b4 <UART_SetConfig+0x210>
 8006994:	2300      	movs	r3, #0
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699a:	e082      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800699c:	2302      	movs	r3, #2
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e07e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069a4:	2304      	movs	r3, #4
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069aa:	e07a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069ac:	2308      	movs	r3, #8
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b2:	e076      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ba:	e072      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a35      	ldr	r2, [pc, #212]	; (8006a98 <UART_SetConfig+0x2f4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d12a      	bne.n	8006a1c <UART_SetConfig+0x278>
 80069c6:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <UART_SetConfig+0x2e4>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069d4:	d01a      	beq.n	8006a0c <UART_SetConfig+0x268>
 80069d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069da:	d81b      	bhi.n	8006a14 <UART_SetConfig+0x270>
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d00c      	beq.n	80069fc <UART_SetConfig+0x258>
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d815      	bhi.n	8006a14 <UART_SetConfig+0x270>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <UART_SetConfig+0x250>
 80069ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f0:	d008      	beq.n	8006a04 <UART_SetConfig+0x260>
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x270>
 80069f4:	2300      	movs	r3, #0
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fa:	e052      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069fc:	2302      	movs	r3, #2
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e04e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0a:	e04a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a12:	e046      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1a:	e042      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <UART_SetConfig+0x2dc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d13a      	bne.n	8006a9c <UART_SetConfig+0x2f8>
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <UART_SetConfig+0x2e4>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a34:	d01a      	beq.n	8006a6c <UART_SetConfig+0x2c8>
 8006a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a3a:	d81b      	bhi.n	8006a74 <UART_SetConfig+0x2d0>
 8006a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a40:	d00c      	beq.n	8006a5c <UART_SetConfig+0x2b8>
 8006a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a46:	d815      	bhi.n	8006a74 <UART_SetConfig+0x2d0>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <UART_SetConfig+0x2b0>
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d008      	beq.n	8006a64 <UART_SetConfig+0x2c0>
 8006a52:	e00f      	b.n	8006a74 <UART_SetConfig+0x2d0>
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5a:	e022      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e01e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6a:	e01a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a72:	e016      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7a:	e012      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a7c:	cfff69f3 	.word	0xcfff69f3
 8006a80:	40008000 	.word	0x40008000
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	40004400 	.word	0x40004400
 8006a90:	40004800 	.word	0x40004800
 8006a94:	40004c00 	.word	0x40004c00
 8006a98:	40005000 	.word	0x40005000
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4aae      	ldr	r2, [pc, #696]	; (8006d60 <UART_SetConfig+0x5bc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f040 8097 	bne.w	8006bdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d823      	bhi.n	8006afe <UART_SetConfig+0x35a>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x318>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006aff 	.word	0x08006aff
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006aff 	.word	0x08006aff
 8006acc:	08006aef 	.word	0x08006aef
 8006ad0:	08006aff 	.word	0x08006aff
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006aff 	.word	0x08006aff
 8006adc:	08006af7 	.word	0x08006af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fd ffec 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae6:	e010      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae8:	4b9e      	ldr	r3, [pc, #632]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aec:	e00d      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aee:	f7fd ff77 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006af4:	e009      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006afc:	e005      	b.n	8006b0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8130 	beq.w	8006d72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	4a94      	ldr	r2, [pc, #592]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d305      	bcc.n	8006b42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d903      	bls.n	8006b4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b48:	e113      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	60fa      	str	r2, [r7, #12]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	4a84      	ldr	r2, [pc, #528]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2200      	movs	r2, #0
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b6c:	f7f9 ff72 	bl	8000a54 <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4610      	mov	r0, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	020b      	lsls	r3, r1, #8
 8006b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b86:	0202      	lsls	r2, r0, #8
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	6849      	ldr	r1, [r1, #4]
 8006b8c:	0849      	lsrs	r1, r1, #1
 8006b8e:	2000      	movs	r0, #0
 8006b90:	460c      	mov	r4, r1
 8006b92:	4605      	mov	r5, r0
 8006b94:	eb12 0804 	adds.w	r8, r2, r4
 8006b98:	eb43 0905 	adc.w	r9, r3, r5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	4693      	mov	fp, r2
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	465b      	mov	r3, fp
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 ff51 	bl	8000a54 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc0:	d308      	bcc.n	8006bd4 <UART_SetConfig+0x430>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc8:	d204      	bcs.n	8006bd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e0ce      	b.n	8006d72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bda:	e0ca      	b.n	8006d72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be4:	d166      	bne.n	8006cb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d827      	bhi.n	8006c3e <UART_SetConfig+0x49a>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x450>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c29 	.word	0x08006c29
 8006c00:	08006c3f 	.word	0x08006c3f
 8006c04:	08006c2f 	.word	0x08006c2f
 8006c08:	08006c3f 	.word	0x08006c3f
 8006c0c:	08006c3f 	.word	0x08006c3f
 8006c10:	08006c3f 	.word	0x08006c3f
 8006c14:	08006c37 	.word	0x08006c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fd ff50 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c1e:	e014      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c20:	f7fd ff62 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c26:	e010      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c28:	4b4e      	ldr	r3, [pc, #312]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c2c:	e00d      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c2e:	f7fd fed7 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c34:	e009      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c3c:	e005      	b.n	8006c4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8090 	beq.w	8006d72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	4a44      	ldr	r2, [pc, #272]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	441a      	add	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d916      	bls.n	8006cac <UART_SetConfig+0x508>
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d212      	bcs.n	8006cac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	8bfb      	ldrh	r3, [r7, #30]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	8bfa      	ldrh	r2, [r7, #30]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e062      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cb2:	e05e      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d828      	bhi.n	8006d0e <UART_SetConfig+0x56a>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x520>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d0f 	.word	0x08006d0f
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d0f 	.word	0x08006d0f
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d07 	.word	0x08006d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fd fee8 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cee:	e014      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fd fefa 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf6:	e010      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf8:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cfc:	e00d      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fd fe6f 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d04:	e009      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d0c:	e005      	b.n	8006d1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d18:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d028      	beq.n	8006d72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	441a      	add	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d910      	bls.n	8006d6c <UART_SetConfig+0x5c8>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d20c      	bcs.n	8006d6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x5ce>
 8006d5e:	bf00      	nop
 8006d60:	40008000 	.word	0x40008000
 8006d64:	00f42400 	.word	0x00f42400
 8006d68:	08007468 	.word	0x08007468
      }
      else
      {
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9a:	d10a      	bne.n	8006eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b098      	sub	sp, #96	; 0x60
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ef0:	f7fa fd06 	bl	8001900 <HAL_GetTick>
 8006ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d12f      	bne.n	8006f64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f88e 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d022      	beq.n	8006f64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f32:	653b      	str	r3, [r7, #80]	; 0x50
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e6      	bne.n	8006f1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e063      	b.n	800702c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d149      	bne.n	8007006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f857 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d03c      	beq.n	8007006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006faa:	633b      	str	r3, [r7, #48]	; 0x30
 8006fac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e6      	bne.n	8006f8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fde:	61fa      	str	r2, [r7, #28]
 8006fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	69b9      	ldr	r1, [r7, #24]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	617b      	str	r3, [r7, #20]
   return(result);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e5      	bne.n	8006fbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e012      	b.n	800702c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3758      	adds	r7, #88	; 0x58
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007044:	e04f      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d04b      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fa fc57 	bl	8001900 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <UART_WaitOnFlagUntilTimeout+0x30>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e04e      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d037      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d034      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d031      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b08      	cmp	r3, #8
 800708e:	d110      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2208      	movs	r2, #8
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f838 	bl	800710e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2208      	movs	r2, #8
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e029      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c0:	d111      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f81e 	bl	800710e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00f      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	429a      	cmp	r2, r3
 8007102:	d0a0      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800710e:	b480      	push	{r7}
 8007110:	b095      	sub	sp, #84	; 0x54
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
 8007136:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	61fb      	str	r3, [r7, #28]
   return(result);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e3      	bne.n	8007148 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d118      	bne.n	80071ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	60bb      	str	r3, [r7, #8]
   return(result);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0310 	bic.w	r3, r3, #16
 800719c:	647b      	str	r3, [r7, #68]	; 0x44
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	613b      	str	r3, [r7, #16]
   return(result);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e6      	bne.n	8007188 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80071ce:	bf00      	nop
 80071d0:	3754      	adds	r7, #84	; 0x54
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e027      	b.n	8007240 <HAL_UARTEx_DisableFifoMode+0x66>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2224      	movs	r2, #36	; 0x24
 80071fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0201 	bic.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800721e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007260:	2302      	movs	r3, #2
 8007262:	e02d      	b.n	80072c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2224      	movs	r2, #36	; 0x24
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f84f 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072dc:	2302      	movs	r3, #2
 80072de:	e02d      	b.n	800733c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f811 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007364:	e031      	b.n	80073ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007366:	2308      	movs	r3, #8
 8007368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800736a:	2308      	movs	r3, #8
 800736c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	0e5b      	lsrs	r3, r3, #25
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	0f5b      	lsrs	r3, r3, #29
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	7b3a      	ldrb	r2, [r7, #12]
 8007392:	4911      	ldr	r1, [pc, #68]	; (80073d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007394:	5c8a      	ldrb	r2, [r1, r2]
 8007396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800739a:	7b3a      	ldrb	r2, [r7, #12]
 800739c:	490f      	ldr	r1, [pc, #60]	; (80073dc <UARTEx_SetNbDataToProcess+0x98>)
 800739e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	7b7a      	ldrb	r2, [r7, #13]
 80073b0:	4909      	ldr	r1, [pc, #36]	; (80073d8 <UARTEx_SetNbDataToProcess+0x94>)
 80073b2:	5c8a      	ldrb	r2, [r1, r2]
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073b8:	7b7a      	ldrb	r2, [r7, #13]
 80073ba:	4908      	ldr	r1, [pc, #32]	; (80073dc <UARTEx_SetNbDataToProcess+0x98>)
 80073bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073be:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	08007480 	.word	0x08007480
 80073dc:	08007488 	.word	0x08007488

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4d0d      	ldr	r5, [pc, #52]	; (8007428 <__libc_init_array+0x38>)
 80073f4:	4c0d      	ldr	r4, [pc, #52]	; (800742c <__libc_init_array+0x3c>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	2600      	movs	r6, #0
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	4d0b      	ldr	r5, [pc, #44]	; (8007430 <__libc_init_array+0x40>)
 8007402:	4c0c      	ldr	r4, [pc, #48]	; (8007434 <__libc_init_array+0x44>)
 8007404:	f000 f818 	bl	8007438 <_init>
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	2600      	movs	r6, #0
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	08007498 	.word	0x08007498
 800742c:	08007498 	.word	0x08007498
 8007430:	08007498 	.word	0x08007498
 8007434:	0800749c 	.word	0x0800749c

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
